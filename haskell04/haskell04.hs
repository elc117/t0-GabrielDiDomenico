-- Autor: Gabriel Di Domenico
-- Data: 01/04/2020
--
import Data.List
-- 1. Crie uma funÃ§Ã£o anoIdade :: Int -> (Int, Int) que, dado o ano de nascimento de uma pessoa, retorne uma tupla contendo o prÃ³prio ano de nascimento e a idade da pessoa no ano atual.
--
anoIdade :: Int -> (Int, Int)
anoIdade x = (x, 2020-x)
--
-- 2. Crie uma funÃ§Ã£o selectName :: (String,Int,Int) -> String que receba uma tupla contendo nome, ano de nascimento e idade de uma pessoa, e retorne seu nome.
--
selectName :: (String,Int,Int) -> String
selectName (x, y, n) = x
--
-- 3. Crie uma funÃ§Ã allNames :: [(String,Int,Int)] -> [String] que receba uma lista com dados de pessoas (nome, ano de nascimento e idade) e retorne uma lista conte
-- ndo todos os nomes. Resolva este exercÃ­cio usando uma funÃ§Ã£o de alta ordem e a funÃ§Ã£o selectName.
--
allNames :: [(String,Int,Int)] -> [String]
allNames list = 
           map selectName list
--allNames list = map (\(x,y,z)-> x) list
--
-- 4. Resolva o exercÃ­cio anterior usando uma funÃ§Ã£o anÃ´nima que substitua a funselectName
--
-- 5. Crie uma funÃ§Ã£o distance :: (Float, Float) -> (Float, Float) -> Float que receba as coordenadas de 2 pontos num espaÃ§o bidimensional e calcule a distÃ¢ncia entre eles usando o teorema de pitÃ¡goras.
--
distance :: (Float, Float) -> (Float, Float) -> Float
distance (x1, y1) (x2, y2) =  sqrt(((x2-x1)**2)+((y2-y1)**2)) 
--
-- 6.VocÃª tem uma lista de tuplas contendo, cada uma, um nome de empresa e a URL de seu site web. Escreva uma funÃ§Ã£o que receba a lista de tuplas e retorne uma lista de links em HTML,
--
htmlLists :: [(String, String)] -> [String]
htmlLists x = map (\x -> "<a href=\""++(snd x)++"\">"++(fst x)++"</a>") x
--
-- 7. Suponha que uma tupla (Float, Float, Float, Float) represente um retÃ¢ngulo (x,y,w,h) com vÃ©rtice superior esquerdo posicionado no ponto x,y e com largura e altura dados por w e h. Considerando isso, crie uma funÃ§Ã£o que receba uma lista de retÃ¢ngulos e retorne outra lista ([Float]) com a Ã¡rea de cada um. Use uma funÃ§Ã£o auxiliar (com nome) para calcular a Ã¡rea de um retÃ¢ngulo.
--
calculaArea :: (Float, Float, Float, Float) -> Float
calculaArea (x,y,w,h) = (w*h)/2

calculaAreaLista :: [(Float, Float, Float, Float)] -> [(Float)]
--calculaAreaLista list = map calculaArea list
calculaAreaLista list = map (\(x,y,w,h) -> (w*h)/2) list 

-- 9. O mÃ³dulo Data.List do Haskell tem vÃ¡rias funÃ§Ãµes muito Ãºteis para manipular listas. Para usar as funÃ§Ãµes deste mÃ³dulo, Ã© preciso importÃ¡-lo no inÃ­cio do programa ou no interpretador interativo (import Data.List). Neste exercÃ­cio, vocÃª irÃ¡ testar a funÃ§Ã£o sort, disponÃ­vel neste mÃ³dulo. Para isso, crie as funÃ§Ãµes testSort1 :: [Int] -> [Int] e testSort2 :: [String] -> [String], aplicando a funÃ§Ã£o sort respectivamente a uma lista de inteiros e a uma lista de strings.
--
